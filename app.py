import streamlit as st
import pandas as pd
import gspread
from google.oauth2.service_account import Credentials
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta

# =================================================================================
# Page Configuration (‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö)
# =================================================================================
st.set_page_config(
    page_title="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏≠.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢",
    page_icon="üå¨Ô∏è",
    layout="wide",
)

# =================================================================================
# Custom CSS for styling (‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏≤‡πÄ‡∏ß‡πá‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°)
# =================================================================================
st.markdown("""
    <style>
    /* Global Font */
    html, body, [class*="st-"] {
        font-family: 'IBM Plex Sans Thai', sans-serif;
    }
    /* Main Card Style */
    .main-metric-card {
        background-color: #FFFFFF;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
        border: 1px solid #EAEAEA;
    }
    /* Headings */
    h1, h2, h3 {
        color: #2c3e50;
    }
    /* Hide Streamlit default elements */
    .st-emotion-cache-18ni7ap, .st-emotion-cache-h4xjwg {
        display: none;
    }
    </style>
""", unsafe_allow_html=True)

# =================================================================================
# Data Loading and Processing Function
# =================================================================================
@st.cache_data(ttl=600) # Refresh data every 10 minutes
def load_data_from_gsheet():
    """
    Connects to Google Sheets using gspread and st.secrets,
    fetches the data, and returns a cleaned pandas DataFrame.
    """
    scopes = ["https://www.googleapis.com/auth/spreadsheets"]
    creds = Credentials.from_service_account_info(
        st.secrets["gcp_service_account"], scopes=scopes
    )
    client = gspread.authorize(creds)
    
    spreadsheet_url = st.secrets["connections"]["gsheets"]["spreadsheet"]
    spreadsheet = client.open_by_url(spreadsheet_url)
    worksheet = spreadsheet.worksheet("PM2.5 Log")
    
    data = worksheet.get_all_records()
    df = pd.DataFrame(data)

    # Validate DataFrame structure
    if df.empty or "Datetime" not in df.columns or "PM2.5" not in df.columns:
        # This error is for internal validation, user-facing errors are handled below
        return pd.DataFrame() 

    # Data Cleaning and Preparation
    df = df[["Datetime", "PM2.5"]].copy()
    df.dropna(inplace=True)
    df.rename(columns={'Datetime': 'timestamp', 'PM2.5': 'pm25'}, inplace=True)
    df['timestamp'] = pd.to_datetime(df['timestamp'])
    df['pm25'] = pd.to_numeric(df['pm25'])
    df.sort_values('timestamp', inplace=True)
    return df

# =================================================================================
# Helper Functions (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì)
# =================================================================================
def get_aqi_category(pm25):
    """Converts PM2.5 value to AQI category, color, and health advice."""
    if pm25 <= 25:
        return "‡∏î‡∏µ‡∏°‡∏≤‡∏Å", "#3498db", "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ‡∏°‡∏≤‡∏Å ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
    elif pm25 <= 37:
        return "‡∏î‡∏µ", "#2ecc71", "‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏î‡∏µ ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
    elif pm25 <= 50:
        return "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á", "#f1c40f", "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥ / ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á"
    elif pm25 <= 90:
        return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "#f39c12", "‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ: ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á / ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á: ‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á"
    else:
        return "‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", "#e74c3c", "‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ï‡∏ô‡πÄ‡∏≠‡∏á‡∏´‡∏≤‡∏Å‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô"

# =================================================================================
# Main Application Logic with Robust Error Handling
# =================================================================================
try:
    df = load_data_from_gsheet()
    if df.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡πÉ‡∏ô Google Sheet ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå 'Datetime', 'PM2.5' ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        st.stop()
except gspread.exceptions.SpreadsheetNotFound:
    project_id = st.secrets.get("gcp_service_account", {}).get("project_id", "your-project-id")
    client_email = st.secrets.get("gcp_service_account", {}).get("client_email", "[‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÉ‡∏ô Secrets]")
    sheet_url = st.secrets.get("connections", {}).get("gsheets", {}).get("spreadsheet", "#")
    st.error(
        f"""
        **‡∏¢‡∏±‡∏á‡∏Ñ‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheet ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ**
        ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏û‡∏µ‡∏¢‡∏á 3 ‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏´‡∏•‡∏±‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏£‡∏±‡∏ö ‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏à‡πÄ‡∏¢‡πá‡∏ô‡πÜ ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ñ‡∏µ‡πà‡∏ñ‡πâ‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Ñ‡∏£‡∏±‡∏ö

        **Checklist "‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏≤‡∏°‡∏Ñ‡∏£‡∏±‡πâ‡∏á" (‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏ 99% ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ô‡∏µ‡πâ):**

        **1. ‡∏Å‡∏≤‡∏£‡πÅ‡∏ä‡∏£‡πå‡∏ä‡∏µ‡∏ó‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 1):**
        - **‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏ä‡∏£‡πå‡πÉ‡∏´‡πâ‡πÉ‡∏ô Google Sheet ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ **‡πÄ‡∏õ‡πä‡∏∞‡πÜ**: `{client_email}`
        - **‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏´‡πâ‡∏Ñ‡∏∑‡∏≠ **"Editor"**
        - **‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡∏ä‡∏µ‡∏ó‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?** ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏µ‡∏ó‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡πâ‡∏≤‡∏Ç‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö

        **2. ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Secrets ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î (‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö 2):**
        - **URL ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?** ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡πÉ‡∏ô Secrets ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏Ç‡∏≤‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏Å‡∏¥‡∏ô
        - **‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å `private_key` ‡∏°‡∏≤‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?** ‡∏•‡∏≠‡∏á‡∏Ñ‡∏±‡∏î‡∏•‡∏≠‡∏Å-‡∏ß‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö `-----BEGIN...` ‡πÅ‡∏•‡∏∞ `-----END...`

        **3. API ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:**
        - **‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏ô‡∏µ‡πâ:** `https://console.cloud.google.com/apis/library/sheets.googleapis.com?project={project_id}`
        - ‡∏•‡∏≠‡∏á **"‡∏õ‡∏¥‡∏î" (Disable) API** ‡πÅ‡∏•‡πâ‡∏ß‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà ‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡πâ‡∏ô **"‡πÄ‡∏õ‡∏¥‡∏î" (Enable) ‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á**
        """
    )
    st.stop()
except gspread.exceptions.WorksheetNotFound:
    st.error("**‡πÑ‡∏°‡πà‡∏û‡∏ö Worksheet 'PM2.5 Log'!** ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏ä‡∏µ‡∏ó‡∏ó‡∏µ‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ß‡πà‡∏≤ `PM2.5 Log` ‡∏à‡∏£‡∏¥‡∏á‡πÜ (‡∏ï‡∏±‡∏ß‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏´‡∏ç‡πà-‡πÄ‡∏•‡πá‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô)")
    st.stop()
except Exception as e:
    st.error(f"**‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î:**\n\n`{e}`\n\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Secrets ‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå Google Sheet ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
    st.stop()

# =================================================================================
# UI Rendering (‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á‡πÅ‡∏≠‡∏õ)
# =================================================================================
st.title("üå¨Ô∏è ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® ‡∏≠.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡∏à.‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà")
latest_timestamp = df['timestamp'].iloc[-1].strftime("%d %B %Y, %H:%M ‡∏ô.")
st.markdown(f"‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠: **{latest_timestamp}**")
st.divider()

# --- Real-time AQI Display ---
latest_pm25 = df['pm25'].iloc[-1]
category, color, advice = get_aqi_category(latest_pm25)
col1, col2 = st.columns([1, 2])

with col1:
    with st.container(border=True):
        st.markdown("<h3 style='text-align: center;'>‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</h3>", unsafe_allow_html=True)
        fig_gauge = go.Figure(go.Indicator(
            mode="gauge+number", value=latest_pm25,
            number={'font': {'size': 60, 'color': color}},
            title={'text': "Œºg/m¬≥", 'font': {'size': 24}},
            gauge={'axis': {'range': [0, 150]}, 'bar': {'color': color},
                   'steps': [{'range': [0, 25], 'color': '#3498db'}, {'range': [25, 37], 'color': '#2ecc71'},
                             {'range': [37, 50], 'color': '#f1c40f'}, {'range': [50, 90], 'color': '#f39c12'},
                             {'range': [90, 150], 'color': '#e74c3c'}]}
        ))
        fig_gauge.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=20))
        st.plotly_chart(fig_gauge, use_container_width=True)

with col2:
    with st.container(border=True):
        st.markdown(f"""
            <h3 style='margin:0; color: #2c3e50;'>‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®: 
                <span style='background-color:{color}; color:white; padding: 5px 10px; border-radius: 5px;'>{category}</span>
            </h3><br>
            <h4>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß:</h4>
            <p style='font-size: 1.1em;'>{advice}</p>
        """, unsafe_allow_html=True)
        st.info("‚ÑπÔ∏è ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô PM2.5 ‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á ‡∏Ñ‡∏∑‡∏≠ 37.5 ¬µg/m¬≥ (‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® ‡∏Å‡∏û. 2566)")

st.divider()

# --- Tabs for different views ---
tab1, tab2, tab3 = st.tabs(["üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á", "üóìÔ∏è ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®", "üåç ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"])

with tab1:
    st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")
    df_24h = df[df['timestamp'] >= (datetime.now() - timedelta(hours=24))]
    if not df_24h.empty:
        fig_24h = px.line(df_24h, x='timestamp', y='pm25', template="plotly_white",
                          labels={'timestamp': '‡πÄ‡∏ß‡∏•‡∏≤', 'pm25': '‡∏Ñ‡πà‡∏≤ PM2.5 (Œºg/m¬≥)'})
        fig_24h.add_hline(y=37.5, line_dash="dot", annotation_text="‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô", line_color="orange")
        fig_24h.update_traces(line_color='#2c3e50', line_width=3)
        st.plotly_chart(fig_24h, use_container_width=True)
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î")

with tab2:
    st.subheader("‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏® (‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô)")
    df_daily = df.set_index('timestamp').resample('D')['pm25'].mean().round(0).reset_index()
    df_daily = df_daily[df_daily['timestamp'] >= (datetime.now() - timedelta(days=35))]
    if not df_daily.empty:
        start_date = df_daily['timestamp'].min() - timedelta(days=df_daily['timestamp'].min().weekday())
        dates = pd.date_range(start=start_date, periods=42) # 6 weeks
        
        calendar_data = pd.DataFrame({'date': dates})
        calendar_data = pd.merge(calendar_data, df_daily, left_on='date', right_on='timestamp', how='left')
        calendar_data['day_of_week'] = calendar_data['date'].dt.day_name()
        calendar_data['week_of_month'] = calendar_data['date'].dt.isocalendar().week
        calendar_data['day_num'] = calendar_data['date'].dt.day
        calendar_data['color'] = calendar_data['pm25'].apply(lambda x: get_aqi_category(x)[1] if pd.notna(x) else 'rgba(0,0,0,0.05)')

        st.markdown("<div style='display: grid; grid-template-columns: repeat(7, 1fr); gap: 5px; text-align: center;'>", unsafe_allow_html=True)
        weekdays = ["Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"]
        for day in weekdays:
            st.markdown(f"<div style='font-weight: bold;'>{day}</div>", unsafe_allow_html=True)
        
        for _, row in calendar_data.iterrows():
            pm_val = f"{int(row['pm25'])}" if pd.notna(row['pm25']) else ""
            font_color = 'white' if pd.notna(row['pm25']) and row['pm25'] > 50 else 'black'
            st.markdown(f"""
                <div style='background-color: {row['color']}; border-radius: 5px; padding: 10px; color: {font_color};'>
                    <div style='font-size: 0.8em;'>{row['day_num']}</div>
                    <div style='font-size: 1.1em; font-weight: bold;'>{pm_val}</div>
                </div>
            """, unsafe_allow_html=True)
        st.markdown("</div>", unsafe_allow_html=True)
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô")

with tab3:
    st.subheader("‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö")
    col_map, col_data = st.columns(2)
    with col_map:
        sansai_coords = pd.DataFrame({'lat': [18.8655], 'lon': [99.0435]})
        st.map(sansai_coords, zoom=11)
    with col_data:
        st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
        st.dataframe(df.tail(10).sort_index(ascending=False), use_container_width=True)

st.divider()
st.caption("‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢ ‡∏Ñ‡∏π‡πà‡∏´‡∏π‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏Ñ‡πâ‡∏î (Coding Copilot) | ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏°‡∏•‡∏û‡∏¥‡∏© ‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢")

