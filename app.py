import streamlit as st
import pandas as pd
import datetime
import calendar
import random
import plotly.express as px

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå ---
st.set_page_config(
    page_title="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á PM2.5 ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô Sarabun ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@400;700&display=swap');
    
    /* Apply Sarabun font to all text elements in the Streamlit app */
    html, body, [class*="css"], .stApp, p, div, span, h1, h2, h3, h4, h5, h6, label {
        font-family: 'Sarabun', sans-serif !important;
    }
    
    /* Custom styling for the main metric */
    .stMetric > div[data-testid="stMetricValue"] {
        font-size: 3rem;
        font-weight: bold;
    }
    .stMetric > div[data-testid="stMetricLabel"] > div {
        font-size: 1.2rem;
    }
    /* Hide Streamlit's default menu and footer */
    #MainMenu {visibility: hidden;}
    footer {visibility: hidden;}
</style>
""", unsafe_allow_html=True)


# --- 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô CCDC ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ---
def get_color_and_status(pm25_value):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏û‡∏£‡πâ‡∏≠‡∏° emoji)
    ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á CCDC (‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ)
    """
    if pm25_value <= 25:
        return 'green', '#5CB85C', 'üü¢ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å'
    elif pm25_value <= 37:
        return 'yellow', '#F0AD4E', 'üü° ‡∏î‡∏µ'
    elif pm25_value <= 50:
        return 'orange', '#F89825', 'üü† ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
    elif pm25_value <= 75:
        return 'red', '#D9534F', 'üî¥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'
    else:
        return 'purple', '#8A2BE2', 'üü£ ‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'

def get_recommendations_general(pm25_value):
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ PM2.5
    """
    if pm25_value <= 25:
        return "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
    elif pm25_value <= 37:
        return "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
    elif pm25_value <= 50:
        return "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"
    elif pm25_value <= 75:
        return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å"
    else:
        return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"

def get_recommendations_vulnerable(pm25_value):
    """
    ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤ PM2.5
    """
    if pm25_value <= 50:
        return "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"
    elif pm25_value <= 75:
        return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"
    else:
        return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏°‡∏¥‡∏î‡∏ä‡∏¥‡∏î"


# --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á) ---
def generate_dummy_data():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    """
    today_date = datetime.date.today()
    today_datetime = datetime.datetime.now()

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    hourly_data = {
        'timestamp': [today_datetime.replace(hour=i, minute=0, second=0, microsecond=0) for i in range(24)],
        'pm25': [random.randint(15, 80) for _ in range(24)]
    }
    hourly_df = pd.DataFrame(hourly_data)
    hourly_df['status_color'] = hourly_df['pm25'].apply(lambda x: get_color_and_status(x)[1])

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    current_year = today_date.year
    current_month = today_date.month
    num_days = calendar.monthrange(current_year, current_month)[1]
    daily_data = {
        'date': [datetime.date(current_year, current_month, d) for d in range(1, num_days + 1)],
        'pm25_avg': [random.randint(15, 80) for _ in range(num_days)]
    }
    daily_df = pd.DataFrame(daily_data)
    daily_df['status_color'] = daily_df['pm25_avg'].apply(lambda x: get_color_and_status(x)[1])

    return hourly_df, daily_df

hourly_data, daily_data = generate_dummy_data()

# --- 4. ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à‡∏î‡πâ‡∏ß‡∏¢ Streamlit ---

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
st.title("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á PM2.5 ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢")
st.markdown(f"**‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}**")
st.markdown("---")

# ‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
current_pm25 = hourly_data['pm25'].iloc[-1]
_, color_hex, status = get_color_and_status(current_pm25)

st.header("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ PM2.5 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô")

col_metric, col_status_text = st.columns([1, 2])

with col_metric:
    st.markdown(f"""
        <div style="
            background-color: {color_hex};
            padding: 20px;
            border-radius: 10px;
            text-align: center;
            color: white;
            box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
            ">
            <div style="font-size: 1.5rem; font-weight: bold;">‡∏Ñ‡πà‡∏≤ PM2.5</div>
            <div style="font-size: 4rem; font-weight: bold;">{current_pm25}</div>
            <div style="font-size: 1rem;">¬µg/m¬≥</div>
        </div>
    """, unsafe_allow_html=True)
with col_status_text:
    st.markdown(f"""
        <div style="padding: 20px;">
            <div style="font-size: 2rem; font-weight: bold; color: {color_hex};">{status}</div>
            <div style="font-size: 1.2rem;">
                ‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏≠‡∏≤‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢‡∏Ç‡∏ì‡∏∞‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö **{status}**
            </div>
            <div style="font-size: 1.2rem; margin-top: 10px;">
                ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥: **{get_recommendations_general(current_pm25)}**
            </div>
        </div>
    """, unsafe_allow_html=True)

st.markdown("---")

# ‡∏Å‡∏£‡∏≤‡∏ü PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ
st.subheader("‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° PM2.5 ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
col_chart, col_summary = st.columns([2, 1])

with col_chart:
    hourly_data['hour'] = hourly_data['timestamp'].dt.hour
    fig = px.bar(
        hourly_data, 
        x='hour', 
        y='pm25', 
        color='status_color',
        color_discrete_map={
            '#5CB85C': '#5CB85C',
            '#F0AD4E': '#F0AD4E',
            '#F89825': '#F89825',
            '#D9534F': '#D9534F',
            '#8A2BE2': '#8A2BE2'
        },
        labels={'pm25': '‡∏Ñ‡πà‡∏≤ PM2.5 (¬µg/m¬≥)', 'hour': '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á'},
        title="‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)",
        template="plotly_white"
    )
    st.plotly_chart(fig, use_container_width=True)

with col_summary:
    st.markdown("##### ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ")
    st.metric(label="‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ PM2.5", value=f"{hourly_data['pm25'].mean():.2f} ¬µg/m¬≥")
    st.metric(label="‡∏Ñ‡πà‡∏≤‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", value=f"{hourly_data['pm25'].max()} ¬µg/m¬≥")
    st.metric(label="‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î", value=f"{hourly_data['pm25'].min()} ¬µg/m¬≥")
    
st.markdown("---")

# ‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
st.subheader("‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
daily_data['date'] = pd.to_datetime(daily_data['date'])
daily_data['day'] = daily_data['date'].dt.day
daily_data['weekday'] = daily_data['date'].dt.day_name()
daily_data['month'] = daily_data['date'].dt.month

# Get today's date to handle future days
today_date = datetime.date.today()

# Create the calendar HTML
month_name = daily_data['date'].iloc[0].strftime('%B %Y')
html_calendar = f"""
    <div style="font-family: Sarabun, sans-serif;">
        <h4 style="text-align: center; margin-bottom: 10px;">‡πÄ‡∏î‡∏∑‡∏≠‡∏ô {daily_data['date'].iloc[0].strftime('%B %Y').replace('January', '‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°').replace('February', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå').replace('March', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°').replace('April', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô').replace('May', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°').replace('June', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô').replace('July', '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°').replace('August', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°').replace('September', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô').replace('October', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°').replace('November', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô').replace('December', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°')}</h4>
        <div style="display: grid; grid-template-columns: repeat(7, 1fr); gap: 5px; text-align: center; font-family: Sarabun, sans-serif;">
"""

day_headers = ["‡∏à‡∏±‡∏ô‡∏ó‡∏£‡πå", "‡∏≠‡∏±‡∏á‡∏Ñ‡∏≤‡∏£", "‡∏û‡∏∏‡∏ò", "‡∏û‡∏§‡∏´‡∏±‡∏™‡∏ö‡∏î‡∏µ", "‡∏®‡∏∏‡∏Å‡∏£‡πå", "‡πÄ‡∏™‡∏≤‡∏£‡πå", "‡∏≠‡∏≤‡∏ó‡∏¥‡∏ï‡∏¢‡πå"]
day_headers_short = ["‡∏à", "‡∏≠", "‡∏û", "‡∏û‡∏§", "‡∏®", "‡∏™", "‡∏≠‡∏≤"]

for header in day_headers_short:
    html_calendar += f"<div style='font-weight: bold; padding: 10px; background-color: #f0f2f6; border-radius: 5px;'>{header}</div>"

# Calculate the starting day of the month
first_day_of_month_weekday = daily_data['date'].iloc[0].weekday()
for _ in range(first_day_of_month_weekday):
    html_calendar += "<div></div>"

for _, row in daily_data.iterrows():
    day = row['day']
    pm25_avg = row['pm25_avg']
    color = row['status_color']
    
    current_day_date = row['date'].date()
    
    if current_day_date > today_date:
        # For future dates, make it grey and transparent
        html_calendar += f"""
        <div style='
            border: 1px solid #ccc; 
            padding: 10px; 
            border-radius: 5px; 
            min-height: 80px; 
            position: relative; 
            background-color: #f0f2f6; 
            opacity: 0.5;
            color: #999;
        '>
            <div style='font-size: 1.5em; font-weight: bold; text-align: left;'>{day}</div>
            <div style='font-size: 1em; position: absolute; bottom: 5px; right: 5px; visibility:hidden;'>-</div>
        </div>
        """
    else:
        # For past and current dates, show the data
        html_calendar += f"""
        <div style='
            border: 1px solid #ccc; 
            padding: 10px; 
            border-radius: 5px; 
            min-height: 80px; 
            position: relative; 
            background-color: {color};
            color: white;
            box-shadow: 0 2px 4px 0 rgba(0,0,0,0.1);
        '>
            <div style='font-size: 1.5em; font-weight: bold; text-align: left;'>{day}</div>
            <div style='font-size: 1em; position: absolute; bottom: 5px; right: 5px;'>{pm25_avg}</div>
        </div>
        """

html_calendar += "</div></div>"
st.markdown(html_calendar, unsafe_allow_html=True)

st.markdown("---")

# ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß
with st.expander("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß ü©∫", expanded=True):
    st.markdown("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:")
    st.markdown(f"**{get_recommendations_general(current_pm25)}**")

    st.markdown("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á (‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏, ‡πÄ‡∏î‡πá‡∏Å, ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß, ‡∏´‡∏ç‡∏¥‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå):")
    st.markdown(f"**{get_recommendations_vulnerable(current_pm25)}**")

st.markdown("---")

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
st.subheader("‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PM2.5")
st.write("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏£‡∏≠‡∏ö 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤:")
patient_data = {
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': [f'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i}' for i in range(1, 8)],
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢': [random.randint(5, 30) for _ in range(7)]
}
patient_df = pd.DataFrame(patient_data)
fig_patient = px.bar(
    patient_df,
    x='‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
    y='‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢',
    labels={'‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢': '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢', '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà'},
    title="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PM2.5",
    template="plotly_white"
)
st.plotly_chart(fig_patient, use_container_width=True)
