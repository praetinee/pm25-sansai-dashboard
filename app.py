import streamlit as st
import pandas as pd
import datetime
import calendar
import random

# --- 1. ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à‡πÅ‡∏•‡∏∞‡∏ü‡∏≠‡∏ô‡∏ï‡πå ---
st.set_page_config(
    page_title="‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á PM2.5 ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢",
    layout="wide",
    initial_sidebar_state="expanded"
)

# ‡πÄ‡∏û‡∏¥‡πà‡∏° CSS ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏õ‡πá‡∏ô Sarabun ‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏ó‡∏∏‡∏Å‡∏≠‡∏á‡∏Ñ‡πå‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö
st.markdown("""
<style>
    @import url('https://fonts.googleapis.com/css2?family=Sarabun:wght@400;700&display=swap');
    
    /* Apply Sarabun font to all text elements in the Streamlit app */
    html, body, [class*="css"], .stApp, p, div, span, h1, h2, h3, h4, h5, h6 {
        font-family: 'Sarabun', sans-serif !important;
    }
    
    /* Custom styling for the main metric */
    .stMetric > div[data-testid="stMetricValue"] {
        font-size: 3rem;
        font-weight: bold;
    }
    .stMetric > div[data-testid="stMetricLabel"] > div {
        font-size: 1.2rem;
    }
</style>
""", unsafe_allow_html=True)


# --- 2. ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô CCDC ---
def get_color_and_status(pm25_value):
    """
    ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ (‡∏û‡∏£‡πâ‡∏≠‡∏° emoji)
    ‡∏ï‡∏≤‡∏°‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Ç‡∏≠‡∏á CCDC (‡∏Å‡∏£‡∏°‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÇ‡∏£‡∏Ñ)
    """
    if pm25_value <= 25:
        return 'green', 'üü¢ ‡∏î‡∏µ‡∏°‡∏≤‡∏Å'
    elif pm25_value <= 37:
        return 'yellow', 'üü° ‡∏î‡∏µ'
    elif pm25_value <= 50:
        return 'orange', 'üü† ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á'
    elif pm25_value <= 75:
        return 'red', 'üî¥ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'
    else:
        return 'purple', 'üü£ ‡∏°‡∏µ‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏ï‡πà‡∏≠‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û'

# --- 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á (‡πÉ‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏∞‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏´‡∏•‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á) ---
def generate_dummy_data():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
    """
    today_date = datetime.date.today()
    today_datetime = datetime.datetime.now()

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    hourly_data = {
        'timestamp': [today_datetime.replace(hour=i, minute=0, second=0, microsecond=0) for i in range(24)],
        'pm25': [random.randint(15, 80) for _ in range(24)]
    }
    hourly_df = pd.DataFrame(hourly_data)
    hourly_df['color'] = hourly_df['pm25'].apply(lambda x: get_color_and_status(x)[0])

    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
    current_year = today_date.year
    current_month = today_date.month
    num_days = calendar.monthrange(current_year, current_month)[1]
    daily_data = {
        'date': [datetime.date(current_year, current_month, d) for d in range(1, num_days + 1)],
        'pm25_avg': [random.randint(15, 80) for _ in range(num_days)]
    }
    daily_df = pd.DataFrame(daily_data)
    daily_df['color'] = daily_df['pm25_avg'].apply(lambda x: get_color_and_status(x)[0])

    return hourly_df, daily_df

hourly_data, daily_data = generate_dummy_data()

# --- 4. ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à‡∏î‡πâ‡∏ß‡∏¢ Streamlit ---

# ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
st.title("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á PM2.5 ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢")
st.markdown(f"**‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î: {datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')}**")
st.markdown("---")

# ‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÉ‡∏ä‡πâ st.markdown ‡πÅ‡∏•‡∏∞ HTML/CSS ‡πÅ‡∏ó‡∏ô st.metric)
current_pm25 = hourly_data['pm25'].iloc[-1]
color, status = get_color_and_status(current_pm25)
st.markdown(f"""
<div style="text-align: left;">
    <div style="font-size: 1.2rem; color: #888;">‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ PM2.5 ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô</div>
    <div style="font-size: 3rem; font-weight: bold; margin-bottom: 0.5rem;">{current_pm25} ¬µg/m¬≥</div>
    <div style="color: {color}; font-size: 1.2rem;">{status}</div>
</div>
""", unsafe_allow_html=True)

st.markdown("---")

# ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
col1, col2 = st.columns(2)

with col1:
    st.subheader("‡∏Ñ‡πà‡∏≤ PM2.5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)")
    hourly_data['hour'] = hourly_data['timestamp'].dt.hour
    st.bar_chart(hourly_data.set_index('hour'), y='pm25', color='color')

with col2:
    st.subheader("‡∏Ñ‡πà‡∏≤ PM2.5 ‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô (‡∏ó‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
    daily_data['date'] = pd.to_datetime(daily_data['date'])
    daily_data['day'] = daily_data['date'].dt.day
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏è‡∏¥‡∏ó‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ô Streamlit
    html_calendar = "<div style='display: grid; grid-template-columns: repeat(7, 1fr); gap: 5px; font-family: Sarabun, sans-serif; text-align: center;'>"
    day_headers = ["‡∏≠‡∏≤", "‡∏à", "‡∏≠", "‡∏û", "‡∏û‡∏§", "‡∏®", "‡∏™"]
    for header in day_headers:
        html_calendar += f"<div style='font-weight: bold; padding: 10px;'>{header}</div>"

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ß‡∏±‡∏ô‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    first_day_of_month_weekday = daily_data['date'].iloc[0].weekday()
    # weekday() returns 0 for Monday, 6 for Sunday. We need to adjust it for Sunday=0
    first_day_of_month_index = (first_day_of_month_weekday + 1) % 7

    for _ in range(first_day_of_month_index):
        html_calendar += "<div></div>"

    for day in range(1, len(daily_data) + 1):
        color = daily_data[daily_data['day'] == day]['color'].iloc[0]
        pm25_avg = daily_data[daily_data['day'] == day]['pm25_avg'].iloc[0]
        html_calendar += f"""
        <div style='border: 1px solid #ccc; padding: 15px; border-radius: 5px; min-height: 80px; position: relative; background-color:{color};'>
            <div style='font-size: 1.5em; font-weight: bold; position: absolute; top: 5px; left: 5px;'>{day}</div>
            <div style='font-size: 1em; position: absolute; bottom: 5px; right: 5px;'>{pm25_avg}</div>
        </div>
        """
    html_calendar += "</div>"
    st.markdown(html_calendar, unsafe_allow_html=True)


st.markdown("---")

# ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß (‡πÉ‡∏ä‡πâ expander ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏û‡∏à‡∏î‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢)
with st.expander("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ï‡∏±‡∏ß ü©∫"):
    st.write("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:")
    def get_recommendations_general(pm25_value):
        if pm25_value <= 25:
            return "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
        elif pm25_value <= 37:
            return "‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÑ‡∏î‡πâ‡∏ï‡∏≤‡∏°‡∏õ‡∏Å‡∏ï‡∏¥"
        elif pm25_value <= 50:
            return "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"
        elif pm25_value <= 75:
            return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏£‡∏á‡∏°‡∏≤‡∏Å"
        else:
            return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"
    st.markdown(f"**{get_recommendations_general(current_pm25)}**")

    st.write("‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏£‡∏≤‡∏∞‡∏ö‡∏≤‡∏á (‡∏ú‡∏π‡πâ‡∏™‡∏π‡∏á‡∏≠‡∏≤‡∏¢‡∏∏, ‡πÄ‡∏î‡πá‡∏Å, ‡∏ú‡∏π‡πâ‡∏°‡∏µ‡πÇ‡∏£‡∏Ñ‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡∏ï‡∏±‡∏ß, ‡∏´‡∏ç‡∏¥‡∏á‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏£‡∏£‡∏†‡πå):")
    def get_recommendations_vulnerable(pm25_value):
        if pm25_value <= 50:
            return "‡∏Ñ‡∏ß‡∏£‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"
        elif pm25_value <= 75:
            return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏™‡∏ß‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏≤‡∏Å‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô"
        else:
            return "‡∏Ñ‡∏ß‡∏£‡∏á‡∏î‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏•‡∏≤‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÇ‡∏î‡∏¢‡πÄ‡∏î‡πá‡∏î‡∏Ç‡∏≤‡∏î ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏≠‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏°‡∏¥‡∏î‡∏ä‡∏¥‡∏î"
    st.markdown(f"**{get_recommendations_vulnerable(current_pm25)}**")

st.markdown("---")

# ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢ (‡∏à‡∏≥‡∏•‡∏≠‡∏á)
st.subheader("‡πÄ‡∏ù‡πâ‡∏≤‡∏£‡∏∞‡∏ß‡∏±‡∏á‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö PM2.5")
st.write("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÉ‡∏ô‡∏£‡∏≠‡∏ö 7 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤:")
patient_data = {
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà': [f'‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {i}' for i in range(1, 8)],
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢': [random.randint(5, 30) for _ in range(7)]
}
patient_df = pd.DataFrame(patient_data)
st.bar_chart(patient_df.set_index('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà')['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢'])
